
TBJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002638  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002734  08002734  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002734  08002734  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002734  08002734  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002738  08002738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800273c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000001c  08002758  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002758  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8df  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d08  00000000  00000000  0002a923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002cf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad62  00000000  00000000  0002d718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bf9  00000000  00000000  0004847a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab09e  00000000  00000000  00052073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de8  00000000  00000000  000fd164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080026dc 	.word	0x080026dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	080026dc 	.word	0x080026dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa3e 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f809 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8a4 	bl	8000374 <MX_GPIO_Init>
  MX_SPI1_Init();
 800022c:	f000 f864 	bl	80002f8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000230:	f002 f812 	bl	8002258 <app_init>

  app_run();
 8000234:	f002 f816 	bl	8002264 <app_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x1c>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b095      	sub	sp, #84	; 0x54
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2414      	movs	r4, #20
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	233c      	movs	r3, #60	; 0x3c
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f002 fa3e 	bl	80026cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	0018      	movs	r0, r3
 8000254:	2310      	movs	r3, #16
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 fa37 	bl	80026cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fdac 	bl	8000dc0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2202      	movs	r2, #2
 800026c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2280      	movs	r2, #128	; 0x80
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000276:	0021      	movs	r1, r4
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2200      	movs	r2, #0
 800027c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2240      	movs	r2, #64	; 0x40
 8000282:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2202      	movs	r2, #2
 8000288:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2202      	movs	r2, #2
 800028e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2200      	movs	r2, #0
 8000294:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2208      	movs	r2, #8
 800029a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	0292      	lsls	r2, r2, #10
 80002a2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	0492      	lsls	r2, r2, #18
 80002aa:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2280      	movs	r2, #128	; 0x80
 80002b0:	0592      	lsls	r2, r2, #22
 80002b2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fdc2 	bl	8000e40 <HAL_RCC_OscConfig>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002c0:	f000 f8d8 	bl	8000474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2207      	movs	r2, #7
 80002c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2202      	movs	r2, #2
 80002ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2102      	movs	r1, #2
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 f913 	bl	800150c <HAL_RCC_ClockConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002ea:	f000 f8c3 	bl	8000474 <Error_Handler>
  }
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b015      	add	sp, #84	; 0x54
 80002f4:	bd90      	pop	{r4, r7, pc}
	...

080002f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <MX_SPI1_Init+0x74>)
 80002fe:	4a1c      	ldr	r2, [pc, #112]	; (8000370 <MX_SPI1_Init+0x78>)
 8000300:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000302:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_SPI1_Init+0x74>)
 8000304:	2282      	movs	r2, #130	; 0x82
 8000306:	0052      	lsls	r2, r2, #1
 8000308:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800030a:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_SPI1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <MX_SPI1_Init+0x74>)
 8000312:	22e0      	movs	r2, #224	; 0xe0
 8000314:	00d2      	lsls	r2, r2, #3
 8000316:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <MX_SPI1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800031e:	4b13      	ldr	r3, [pc, #76]	; (800036c <MX_SPI1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <MX_SPI1_Init+0x74>)
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <MX_SPI1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_SPI1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <MX_SPI1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_SPI1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_SPI1_Init+0x74>)
 8000346:	2207      	movs	r2, #7
 8000348:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_SPI1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_SPI1_Init+0x74>)
 8000352:	2208      	movs	r2, #8
 8000354:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <MX_SPI1_Init+0x74>)
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fa61 	bl	8001820 <HAL_SPI_Init>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000362:	f000 f887 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	2000003c 	.word	0x2000003c
 8000370:	40013000 	.word	0x40013000

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b089      	sub	sp, #36	; 0x24
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	240c      	movs	r4, #12
 800037c:	193b      	adds	r3, r7, r4
 800037e:	0018      	movs	r0, r3
 8000380:	2314      	movs	r3, #20
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f002 f9a1 	bl	80026cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b37      	ldr	r3, [pc, #220]	; (8000468 <MX_GPIO_Init+0xf4>)
 800038c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800038e:	4b36      	ldr	r3, [pc, #216]	; (8000468 <MX_GPIO_Init+0xf4>)
 8000390:	2101      	movs	r1, #1
 8000392:	430a      	orrs	r2, r1
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
 8000396:	4b34      	ldr	r3, [pc, #208]	; (8000468 <MX_GPIO_Init+0xf4>)
 8000398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039a:	2201      	movs	r2, #1
 800039c:	4013      	ands	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a2:	4b31      	ldr	r3, [pc, #196]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003a6:	4b30      	ldr	r3, [pc, #192]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003a8:	2104      	movs	r1, #4
 80003aa:	430a      	orrs	r2, r1
 80003ac:	635a      	str	r2, [r3, #52]	; 0x34
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b2:	2204      	movs	r2, #4
 80003b4:	4013      	ands	r3, r2
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ba:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003be:	4b2a      	ldr	r3, [pc, #168]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003c0:	2108      	movs	r1, #8
 80003c2:	430a      	orrs	r2, r1
 80003c4:	635a      	str	r2, [r3, #52]	; 0x34
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ca:	2208      	movs	r2, #8
 80003cc:	4013      	ands	r3, r2
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80003d2:	23a0      	movs	r3, #160	; 0xa0
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	2200      	movs	r2, #0
 80003d8:	2120      	movs	r1, #32
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fcd2 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80003e0:	23c0      	movs	r3, #192	; 0xc0
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	4821      	ldr	r0, [pc, #132]	; (800046c <MX_GPIO_Init+0xf8>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	0019      	movs	r1, r3
 80003ea:	f000 fccb 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	2220      	movs	r2, #32
 80003f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	2201      	movs	r2, #1
 80003f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	193b      	adds	r3, r7, r4
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000406:	193a      	adds	r2, r7, r4
 8000408:	23a0      	movs	r3, #160	; 0xa0
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	0011      	movs	r1, r2
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fb4c 	bl	8000aac <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000414:	0021      	movs	r1, r4
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2220      	movs	r2, #32
 800041a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2288      	movs	r2, #136	; 0x88
 8000420:	0352      	lsls	r2, r2, #13
 8000422:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800042a:	000c      	movs	r4, r1
 800042c:	187b      	adds	r3, r7, r1
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <MX_GPIO_Init+0xfc>)
 8000430:	0019      	movs	r1, r3
 8000432:	0010      	movs	r0, r2
 8000434:	f000 fb3a 	bl	8000aac <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000438:	0021      	movs	r1, r4
 800043a:	187b      	adds	r3, r7, r1
 800043c:	22c0      	movs	r2, #192	; 0xc0
 800043e:	0092      	lsls	r2, r2, #2
 8000440:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2201      	movs	r2, #1
 8000446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2203      	movs	r2, #3
 8000452:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000454:	187b      	adds	r3, r7, r1
 8000456:	4a05      	ldr	r2, [pc, #20]	; (800046c <MX_GPIO_Init+0xf8>)
 8000458:	0019      	movs	r1, r3
 800045a:	0010      	movs	r0, r2
 800045c:	f000 fb26 	bl	8000aac <HAL_GPIO_Init>

}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b009      	add	sp, #36	; 0x24
 8000466:	bd90      	pop	{r4, r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	50000c00 	.word	0x50000c00
 8000470:	50000800 	.word	0x50000800

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	e7fe      	b.n	800047c <Error_Handler+0x8>

0800047e <nrf24_setupPins>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;

void nrf24_setupPins()
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0

}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	0002      	movs	r2, r0
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, state);
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	781a      	ldrb	r2, [r3, #0]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <nrf24_ce_digitalWrite+0x24>)
 800049e:	0019      	movs	r1, r3
 80004a0:	f000 fc70 	bl	8000d84 <HAL_GPIO_WritePin>
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	50000c00 	.word	0x50000c00

080004b0 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	0002      	movs	r2, r0
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, state);
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781a      	ldrb	r2, [r3, #0]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <nrf24_csn_digitalWrite+0x24>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	f000 fc5c 	bl	8000d84 <HAL_GPIO_WritePin>
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	50000c00 	.word	0x50000c00

080004d8 <nrf24_spi_transfer>:
{
	return 0;
}
/* ------------------------------------------------------------------------- */

uint8_t nrf24_spi_transfer(uint8_t *tx){
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af02      	add	r7, sp, #8
 80004de:	6078      	str	r0, [r7, #4]
	uint8_t rx;

	HAL_SPI_TransmitReceive(&hspi1, tx, &rx, 1, 100);
 80004e0:	240f      	movs	r4, #15
 80004e2:	193a      	adds	r2, r7, r4
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	4806      	ldr	r0, [pc, #24]	; (8000500 <nrf24_spi_transfer+0x28>)
 80004e8:	2364      	movs	r3, #100	; 0x64
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	2301      	movs	r3, #1
 80004ee:	f001 fa4f 	bl	8001990 <HAL_SPI_TransmitReceive>

	return rx;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	781b      	ldrb	r3, [r3, #0]
}
 80004f6:	0018      	movs	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b005      	add	sp, #20
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	2000003c 	.word	0x2000003c

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_MspInit+0x4c>)
 800050c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_MspInit+0x4c>)
 8000510:	2101      	movs	r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	641a      	str	r2, [r3, #64]	; 0x40
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_MspInit+0x4c>)
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_MspInit+0x4c>)
 8000524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_MspInit+0x4c>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0549      	lsls	r1, r1, #21
 800052c:	430a      	orrs	r2, r1
 800052e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <HAL_MspInit+0x4c>)
 8000532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	055b      	lsls	r3, r3, #21
 8000538:	4013      	ands	r3, r2
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800053e:	23c0      	movs	r3, #192	; 0xc0
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	0018      	movs	r0, r3
 8000544:	f000 f956 	bl	80007f4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b002      	add	sp, #8
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b08b      	sub	sp, #44	; 0x2c
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	2414      	movs	r4, #20
 800055e:	193b      	adds	r3, r7, r4
 8000560:	0018      	movs	r0, r3
 8000562:	2314      	movs	r3, #20
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f002 f8b0 	bl	80026cc <memset>
  if(hspi->Instance==SPI1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <HAL_SPI_MspInit+0x9c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d138      	bne.n	80005e8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <HAL_SPI_MspInit+0xa0>)
 8000578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <HAL_SPI_MspInit+0xa0>)
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	0149      	lsls	r1, r1, #5
 8000580:	430a      	orrs	r2, r1
 8000582:	641a      	str	r2, [r3, #64]	; 0x40
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <HAL_SPI_MspInit+0xa0>)
 8000586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	015b      	lsls	r3, r3, #5
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_SPI_MspInit+0xa0>)
 8000594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_SPI_MspInit+0xa0>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_SPI_MspInit+0xa0>)
 80005a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80005aa:	0021      	movs	r1, r4
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2246      	movs	r2, #70	; 0x46
 80005b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2202      	movs	r2, #2
 80005b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	187a      	adds	r2, r7, r1
 80005cc:	23a0      	movs	r3, #160	; 0xa0
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fa6a 	bl	8000aac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2019      	movs	r0, #25
 80005de:	f000 f9cb 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80005e2:	2019      	movs	r0, #25
 80005e4:	f000 f9dd 	bl	80009a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b00b      	add	sp, #44	; 0x2c
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40013000 	.word	0x40013000
 80005f4:	40021000 	.word	0x40021000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f8aa 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1/I2S1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <SPI1_IRQHandler+0x14>)
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fb80 	bl	8001d34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	2000003c 	.word	0x2000003c

08000640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000650:	f7ff fff6 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopForever+0x6>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopForever+0xe>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopForever+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067a:	f002 f803 	bl	8002684 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800067e:	f7ff fdcd 	bl	800021c <main>

08000682 <LoopForever>:

LoopForever:
  b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   r0, =_estack
 8000684:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000690:	0800273c 	.word	0x0800273c
  ldr r2, =_sbss
 8000694:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000698:	200000a8 	.word	0x200000a8

0800069c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_COMP_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_Init+0x3c>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_Init+0x3c>)
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	0049      	lsls	r1, r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ba:	2003      	movs	r0, #3
 80006bc:	f000 f810 	bl	80006e0 <HAL_InitTick>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d003      	beq.n	80006cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e001      	b.n	80006d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80006cc:	f7ff ff1a 	bl	8000504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	781b      	ldrb	r3, [r3, #0]
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40022000 	.word	0x40022000

080006e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e8:	230f      	movs	r3, #15
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <HAL_InitTick+0x88>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d02b      	beq.n	8000750 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <HAL_InitTick+0x8c>)
 80006fa:	681c      	ldr	r4, [r3, #0]
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_InitTick+0x88>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	0019      	movs	r1, r3
 8000702:	23fa      	movs	r3, #250	; 0xfa
 8000704:	0098      	lsls	r0, r3, #2
 8000706:	f7ff fcfd 	bl	8000104 <__udivsi3>
 800070a:	0003      	movs	r3, r0
 800070c:	0019      	movs	r1, r3
 800070e:	0020      	movs	r0, r4
 8000710:	f7ff fcf8 	bl	8000104 <__udivsi3>
 8000714:	0003      	movs	r3, r0
 8000716:	0018      	movs	r0, r3
 8000718:	f000 f953 	bl	80009c2 <HAL_SYSTICK_Config>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d112      	bne.n	8000746 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b03      	cmp	r3, #3
 8000724:	d80a      	bhi.n	800073c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	2301      	movs	r3, #1
 800072a:	425b      	negs	r3, r3
 800072c:	2200      	movs	r2, #0
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f922 	bl	8000978 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_InitTick+0x90>)
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e00d      	b.n	8000758 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e008      	b.n	8000758 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000746:	230f      	movs	r3, #15
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e003      	b.n	8000758 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000750:	230f      	movs	r3, #15
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000758:	230f      	movs	r3, #15
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	781b      	ldrb	r3, [r3, #0]
}
 800075e:	0018      	movs	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	b005      	add	sp, #20
 8000764:	bd90      	pop	{r4, r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000008 	.word	0x20000008
 800076c:	20000000 	.word	0x20000000
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x1c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	001a      	movs	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x20>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	18d2      	adds	r2, r2, r3
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <HAL_IncTick+0x20>)
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000008 	.word	0x20000008
 8000794:	200000a0 	.word	0x200000a0

08000798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <HAL_GetTick+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	200000a0 	.word	0x200000a0

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b4:	f7ff fff0 	bl	8000798 <HAL_GetTick>
 80007b8:	0003      	movs	r3, r0
 80007ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	d005      	beq.n	80007d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_Delay+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	001a      	movs	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	189b      	adds	r3, r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	f7ff ffe0 	bl	8000798 <HAL_GetTick>
 80007d8:	0002      	movs	r2, r0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8f7      	bhi.n	80007d4 <HAL_Delay+0x28>
  {
  }
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b004      	add	sp, #16
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000008 	.word	0x20000008

080007f4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000802:	4013      	ands	r3, r2
 8000804:	0019      	movs	r1, r3
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40010000 	.word	0x40010000
 800081c:	fffff9ff 	.word	0xfffff9ff

08000820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	0002      	movs	r2, r0
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b7f      	cmp	r3, #127	; 0x7f
 8000832:	d809      	bhi.n	8000848 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	001a      	movs	r2, r3
 800083a:	231f      	movs	r3, #31
 800083c:	401a      	ands	r2, r3
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <__NVIC_EnableIRQ+0x30>)
 8000840:	2101      	movs	r1, #1
 8000842:	4091      	lsls	r1, r2
 8000844:	000a      	movs	r2, r1
 8000846:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b002      	add	sp, #8
 800084e:	bd80      	pop	{r7, pc}
 8000850:	e000e100 	.word	0xe000e100

08000854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	0002      	movs	r2, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b7f      	cmp	r3, #127	; 0x7f
 8000868:	d828      	bhi.n	80008bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086a:	4a2f      	ldr	r2, [pc, #188]	; (8000928 <__NVIC_SetPriority+0xd4>)
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b25b      	sxtb	r3, r3
 8000872:	089b      	lsrs	r3, r3, #2
 8000874:	33c0      	adds	r3, #192	; 0xc0
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	589b      	ldr	r3, [r3, r2]
 800087a:	1dfa      	adds	r2, r7, #7
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	0011      	movs	r1, r2
 8000880:	2203      	movs	r2, #3
 8000882:	400a      	ands	r2, r1
 8000884:	00d2      	lsls	r2, r2, #3
 8000886:	21ff      	movs	r1, #255	; 0xff
 8000888:	4091      	lsls	r1, r2
 800088a:	000a      	movs	r2, r1
 800088c:	43d2      	mvns	r2, r2
 800088e:	401a      	ands	r2, r3
 8000890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	019b      	lsls	r3, r3, #6
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	401a      	ands	r2, r3
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	0018      	movs	r0, r3
 80008a0:	2303      	movs	r3, #3
 80008a2:	4003      	ands	r3, r0
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a8:	481f      	ldr	r0, [pc, #124]	; (8000928 <__NVIC_SetPriority+0xd4>)
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	089b      	lsrs	r3, r3, #2
 80008b2:	430a      	orrs	r2, r1
 80008b4:	33c0      	adds	r3, #192	; 0xc0
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ba:	e031      	b.n	8000920 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008bc:	4a1b      	ldr	r2, [pc, #108]	; (800092c <__NVIC_SetPriority+0xd8>)
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0019      	movs	r1, r3
 80008c4:	230f      	movs	r3, #15
 80008c6:	400b      	ands	r3, r1
 80008c8:	3b08      	subs	r3, #8
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	3306      	adds	r3, #6
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	18d3      	adds	r3, r2, r3
 80008d2:	3304      	adds	r3, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	1dfa      	adds	r2, r7, #7
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	0011      	movs	r1, r2
 80008dc:	2203      	movs	r2, #3
 80008de:	400a      	ands	r2, r1
 80008e0:	00d2      	lsls	r2, r2, #3
 80008e2:	21ff      	movs	r1, #255	; 0xff
 80008e4:	4091      	lsls	r1, r2
 80008e6:	000a      	movs	r2, r1
 80008e8:	43d2      	mvns	r2, r2
 80008ea:	401a      	ands	r2, r3
 80008ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	22ff      	movs	r2, #255	; 0xff
 80008f4:	401a      	ands	r2, r3
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0018      	movs	r0, r3
 80008fc:	2303      	movs	r3, #3
 80008fe:	4003      	ands	r3, r0
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <__NVIC_SetPriority+0xd8>)
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	001c      	movs	r4, r3
 800090c:	230f      	movs	r3, #15
 800090e:	4023      	ands	r3, r4
 8000910:	3b08      	subs	r3, #8
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	430a      	orrs	r2, r1
 8000916:	3306      	adds	r3, #6
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	18c3      	adds	r3, r0, r3
 800091c:	3304      	adds	r3, #4
 800091e:	601a      	str	r2, [r3, #0]
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b003      	add	sp, #12
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	1e5a      	subs	r2, r3, #1
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	045b      	lsls	r3, r3, #17
 8000940:	429a      	cmp	r2, r3
 8000942:	d301      	bcc.n	8000948 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000944:	2301      	movs	r3, #1
 8000946:	e010      	b.n	800096a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <SysTick_Config+0x44>)
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	3a01      	subs	r2, #1
 800094e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000950:	2301      	movs	r3, #1
 8000952:	425b      	negs	r3, r3
 8000954:	2103      	movs	r1, #3
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff ff7c 	bl	8000854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SysTick_Config+0x44>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SysTick_Config+0x44>)
 8000964:	2207      	movs	r2, #7
 8000966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000968:	2300      	movs	r3, #0
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	e000e010 	.word	0xe000e010

08000978 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	210f      	movs	r1, #15
 8000984:	187b      	adds	r3, r7, r1
 8000986:	1c02      	adds	r2, r0, #0
 8000988:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	187b      	adds	r3, r7, r1
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b25b      	sxtb	r3, r3
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff ff5d 	bl	8000854 <__NVIC_SetPriority>
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b004      	add	sp, #16
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	0002      	movs	r2, r0
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff ff33 	bl	8000820 <__NVIC_EnableIRQ>
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ffaf 	bl	8000930 <SysTick_Config>
 80009d2:	0003      	movs	r3, r0
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009e4:	210f      	movs	r1, #15
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2225      	movs	r2, #37	; 0x25
 80009f0:	5c9b      	ldrb	r3, [r3, r2]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d006      	beq.n	8000a06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2204      	movs	r2, #4
 80009fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	e048      	b.n	8000a98 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	210e      	movs	r1, #14
 8000a12:	438a      	bics	r2, r1
 8000a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	438a      	bics	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a30:	491d      	ldr	r1, [pc, #116]	; (8000aa8 <HAL_DMA_Abort_IT+0xcc>)
 8000a32:	400a      	ands	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	221c      	movs	r2, #28
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	2101      	movs	r1, #1
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a52:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00c      	beq.n	8000a76 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a66:	4910      	ldr	r1, [pc, #64]	; (8000aa8 <HAL_DMA_Abort_IT+0xcc>)
 8000a68:	400a      	ands	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000a74:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2225      	movs	r2, #37	; 0x25
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2224      	movs	r2, #36	; 0x24
 8000a82:	2100      	movs	r1, #0
 8000a84:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	0010      	movs	r0, r2
 8000a96:	4798      	blx	r3
    }
  }
  return status;
 8000a98:	230f      	movs	r3, #15
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	781b      	ldrb	r3, [r3, #0]
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	fffffeff 	.word	0xfffffeff

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aba:	e14d      	b.n	8000d58 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <HAL_GPIO_Init+0x28>
 8000ad2:	e13e      	b.n	8000d52 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2203      	movs	r2, #3
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <HAL_GPIO_Init+0x40>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d130      	bne.n	8000b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	43da      	mvns	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b22:	2201      	movs	r2, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2203      	movs	r2, #3
 8000b54:	4013      	ands	r3, r2
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d017      	beq.n	8000b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2203      	movs	r2, #3
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d123      	bne.n	8000bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	58d3      	ldr	r3, [r2, r3]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	4013      	ands	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	220f      	movs	r2, #15
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	691a      	ldr	r2, [r3, #16]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	400b      	ands	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	6939      	ldr	r1, [r7, #16]
 8000bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	23c0      	movs	r3, #192	; 0xc0
 8000c18:	029b      	lsls	r3, r3, #10
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d100      	bne.n	8000c20 <HAL_GPIO_Init+0x174>
 8000c1e:	e098      	b.n	8000d52 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c20:	4a53      	ldr	r2, [pc, #332]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3318      	adds	r3, #24
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	589b      	ldr	r3, [r3, r2]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	220f      	movs	r2, #15
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d019      	beq.n	8000c82 <HAL_GPIO_Init+0x1d6>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0x1d2>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <HAL_GPIO_Init+0x2cc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00d      	beq.n	8000c7a <HAL_GPIO_Init+0x1ce>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d007      	beq.n	8000c76 <HAL_GPIO_Init+0x1ca>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a45      	ldr	r2, [pc, #276]	; (8000d80 <HAL_GPIO_Init+0x2d4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_GPIO_Init+0x1c6>
 8000c6e:	2304      	movs	r3, #4
 8000c70:	e008      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c72:	2305      	movs	r3, #5
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e004      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e002      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c82:	2300      	movs	r3, #0
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	2103      	movs	r1, #3
 8000c88:	400a      	ands	r2, r1
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	4093      	lsls	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c94:	4936      	ldr	r1, [pc, #216]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3318      	adds	r3, #24
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ca2:	4a33      	ldr	r2, [pc, #204]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	58d3      	ldr	r3, [r2, r3]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	025b      	lsls	r3, r3, #9
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cc8:	4929      	ldr	r1, [pc, #164]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000cd0:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000cd2:	2384      	movs	r3, #132	; 0x84
 8000cd4:	58d3      	ldr	r3, [r2, r3]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	029b      	lsls	r3, r3, #10
 8000cea:	4013      	ands	r3, r2
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf6:	491e      	ldr	r1, [pc, #120]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000cf8:	2284      	movs	r2, #132	; 0x84
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43da      	mvns	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	035b      	lsls	r3, r3, #13
 8000d16:	4013      	ands	r3, r2
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43da      	mvns	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	039b      	lsls	r3, r3, #14
 8000d40:	4013      	ands	r3, r2
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	40da      	lsrs	r2, r3
 8000d60:	1e13      	subs	r3, r2, #0
 8000d62:	d000      	beq.n	8000d66 <HAL_GPIO_Init+0x2ba>
 8000d64:	e6aa      	b.n	8000abc <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b006      	add	sp, #24
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021800 	.word	0x40021800
 8000d74:	50000400 	.word	0x50000400
 8000d78:	50000800 	.word	0x50000800
 8000d7c:	50000c00 	.word	0x50000c00
 8000d80:	50001000 	.word	0x50001000

08000d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	0011      	movs	r1, r2
 8000d90:	1cbb      	adds	r3, r7, #2
 8000d92:	1c02      	adds	r2, r0, #0
 8000d94:	801a      	strh	r2, [r3, #0]
 8000d96:	1c7b      	adds	r3, r7, #1
 8000d98:	1c0a      	adds	r2, r1, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d9c:	1c7b      	adds	r3, r7, #1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da4:	1cbb      	adds	r3, r7, #2
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dae:	1cbb      	adds	r3, r7, #2
 8000db0:	881a      	ldrh	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d11f      	bne.n	8000e24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	0013      	movs	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	189b      	adds	r3, r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4912      	ldr	r1, [pc, #72]	; (8000e3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff f986 	bl	8000104 <__udivsi3>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dfe:	e008      	b.n	8000e12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e001      	b.n	8000e12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e009      	b.n	8000e26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d0ed      	beq.n	8000e00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40007000 	.word	0x40007000
 8000e34:	fffff9ff 	.word	0xfffff9ff
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	000f4240 	.word	0x000f4240

08000e40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f000 fb56 	bl	8001500 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d100      	bne.n	8000e60 <HAL_RCC_OscConfig+0x20>
 8000e5e:	e07d      	b.n	8000f5c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e60:	4bc3      	ldr	r3, [pc, #780]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2238      	movs	r2, #56	; 0x38
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e6a:	4bc1      	ldr	r3, [pc, #772]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	4013      	ands	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2b10      	cmp	r3, #16
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_OscConfig+0x40>
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d002      	beq.n	8000e86 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e86:	4bba      	ldr	r3, [pc, #744]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d063      	beq.n	8000f5a <HAL_RCC_OscConfig+0x11a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d15f      	bne.n	8000f5a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f000 fb30 	bl	8001500 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	025b      	lsls	r3, r3, #9
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d107      	bne.n	8000ebc <HAL_RCC_OscConfig+0x7c>
 8000eac:	4bb0      	ldr	r3, [pc, #704]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4baf      	ldr	r3, [pc, #700]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	0249      	lsls	r1, r1, #9
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e020      	b.n	8000efe <HAL_RCC_OscConfig+0xbe>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	23a0      	movs	r3, #160	; 0xa0
 8000ec2:	02db      	lsls	r3, r3, #11
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d10e      	bne.n	8000ee6 <HAL_RCC_OscConfig+0xa6>
 8000ec8:	4ba9      	ldr	r3, [pc, #676]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4ba8      	ldr	r3, [pc, #672]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	02c9      	lsls	r1, r1, #11
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	4ba6      	ldr	r3, [pc, #664]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4ba5      	ldr	r3, [pc, #660]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0249      	lsls	r1, r1, #9
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e00b      	b.n	8000efe <HAL_RCC_OscConfig+0xbe>
 8000ee6:	4ba2      	ldr	r3, [pc, #648]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4ba1      	ldr	r3, [pc, #644]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000eec:	49a1      	ldr	r1, [pc, #644]	; (8001174 <HAL_RCC_OscConfig+0x334>)
 8000eee:	400a      	ands	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	4b9f      	ldr	r3, [pc, #636]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b9e      	ldr	r3, [pc, #632]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000ef8:	499f      	ldr	r1, [pc, #636]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000efa:	400a      	ands	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d014      	beq.n	8000f30 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f06:	f7ff fc47 	bl	8000798 <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fc42 	bl	8000798 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e2ee      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f22:	4b93      	ldr	r3, [pc, #588]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	029b      	lsls	r3, r3, #10
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0xd0>
 8000f2e:	e015      	b.n	8000f5c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fc32 	bl	8000798 <HAL_GetTick>
 8000f34:	0003      	movs	r3, r0
 8000f36:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fc2d 	bl	8000798 <HAL_GetTick>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b64      	cmp	r3, #100	; 0x64
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e2d9      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f4c:	4b88      	ldr	r3, [pc, #544]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	4013      	ands	r3, r2
 8000f56:	d1f0      	bne.n	8000f3a <HAL_RCC_OscConfig+0xfa>
 8000f58:	e000      	b.n	8000f5c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2202      	movs	r2, #2
 8000f62:	4013      	ands	r3, r2
 8000f64:	d100      	bne.n	8000f68 <HAL_RCC_OscConfig+0x128>
 8000f66:	e099      	b.n	800109c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f68:	4b81      	ldr	r3, [pc, #516]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2238      	movs	r2, #56	; 0x38
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f72:	4b7f      	ldr	r3, [pc, #508]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2203      	movs	r2, #3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d102      	bne.n	8000f88 <HAL_RCC_OscConfig+0x148>
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d002      	beq.n	8000f8e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d135      	bne.n	8000ffa <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f8e:	4b78      	ldr	r3, [pc, #480]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	4013      	ands	r3, r2
 8000f98:	d005      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x166>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e2ac      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa6:	4b72      	ldr	r3, [pc, #456]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4a74      	ldr	r2, [pc, #464]	; (800117c <HAL_RCC_OscConfig+0x33c>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	0019      	movs	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	021a      	lsls	r2, r3, #8
 8000fb6:	4b6e      	ldr	r3, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d112      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fc2:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6e      	ldr	r2, [pc, #440]	; (8001180 <HAL_RCC_OscConfig+0x340>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	0019      	movs	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	4b67      	ldr	r3, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fd6:	4b66      	ldr	r3, [pc, #408]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	0adb      	lsrs	r3, r3, #11
 8000fdc:	2207      	movs	r2, #7
 8000fde:	4013      	ands	r3, r2
 8000fe0:	4a68      	ldr	r2, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x344>)
 8000fe2:	40da      	lsrs	r2, r3
 8000fe4:	4b68      	ldr	r3, [pc, #416]	; (8001188 <HAL_RCC_OscConfig+0x348>)
 8000fe6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fe8:	4b68      	ldr	r3, [pc, #416]	; (800118c <HAL_RCC_OscConfig+0x34c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff fb77 	bl	80006e0 <HAL_InitTick>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d051      	beq.n	800109a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e282      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d030      	beq.n	8001064 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001002:	4b5b      	ldr	r3, [pc, #364]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a5e      	ldr	r2, [pc, #376]	; (8001180 <HAL_RCC_OscConfig+0x340>)
 8001008:	4013      	ands	r3, r2
 800100a:	0019      	movs	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	4b57      	ldr	r3, [pc, #348]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001016:	4b56      	ldr	r3, [pc, #344]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b55      	ldr	r3, [pc, #340]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	0049      	lsls	r1, r1, #1
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fbb8 	bl	8000798 <HAL_GetTick>
 8001028:	0003      	movs	r3, r0
 800102a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fbb3 	bl	8000798 <HAL_GetTick>
 8001032:	0002      	movs	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e25f      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001040:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4013      	ands	r3, r2
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b48      	ldr	r3, [pc, #288]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	4a4a      	ldr	r2, [pc, #296]	; (800117c <HAL_RCC_OscConfig+0x33c>)
 8001052:	4013      	ands	r3, r2
 8001054:	0019      	movs	r1, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	021a      	lsls	r2, r3, #8
 800105c:	4b44      	ldr	r3, [pc, #272]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 800105e:	430a      	orrs	r2, r1
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	e01b      	b.n	800109c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001064:	4b42      	ldr	r3, [pc, #264]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 800106a:	4949      	ldr	r1, [pc, #292]	; (8001190 <HAL_RCC_OscConfig+0x350>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fb92 	bl	8000798 <HAL_GetTick>
 8001074:	0003      	movs	r3, r0
 8001076:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107a:	f7ff fb8d 	bl	8000798 <HAL_GetTick>
 800107e:	0002      	movs	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e239      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4013      	ands	r3, r2
 8001096:	d1f0      	bne.n	800107a <HAL_RCC_OscConfig+0x23a>
 8001098:	e000      	b.n	800109c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2208      	movs	r2, #8
 80010a2:	4013      	ands	r3, r2
 80010a4:	d047      	beq.n	8001136 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2238      	movs	r2, #56	; 0x38
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b18      	cmp	r3, #24
 80010b0:	d10a      	bne.n	80010c8 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d03c      	beq.n	8001136 <HAL_RCC_OscConfig+0x2f6>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d138      	bne.n	8001136 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e21b      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d019      	beq.n	8001104 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 80010d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fb5c 	bl	8000798 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff fb57 	bl	8000798 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e203      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d0f1      	beq.n	80010e6 <HAL_RCC_OscConfig+0x2a6>
 8001102:	e018      	b.n	8001136 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001106:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 800110a:	2101      	movs	r1, #1
 800110c:	438a      	bics	r2, r1
 800110e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001110:	f7ff fb42 	bl	8000798 <HAL_GetTick>
 8001114:	0003      	movs	r3, r0
 8001116:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111a:	f7ff fb3d 	bl	8000798 <HAL_GetTick>
 800111e:	0002      	movs	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e1e9      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	2202      	movs	r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d1f1      	bne.n	800111a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2204      	movs	r2, #4
 800113c:	4013      	ands	r3, r2
 800113e:	d100      	bne.n	8001142 <HAL_RCC_OscConfig+0x302>
 8001140:	e0c6      	b.n	80012d0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001142:	231f      	movs	r3, #31
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2238      	movs	r2, #56	; 0x38
 8001150:	4013      	ands	r3, r2
 8001152:	2b20      	cmp	r3, #32
 8001154:	d11e      	bne.n	8001194 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d100      	bne.n	8001162 <HAL_RCC_OscConfig+0x322>
 8001160:	e0b6      	b.n	80012d0 <HAL_RCC_OscConfig+0x490>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d000      	beq.n	800116c <HAL_RCC_OscConfig+0x32c>
 800116a:	e0b1      	b.n	80012d0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e1c7      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
 8001170:	40021000 	.word	0x40021000
 8001174:	fffeffff 	.word	0xfffeffff
 8001178:	fffbffff 	.word	0xfffbffff
 800117c:	ffff80ff 	.word	0xffff80ff
 8001180:	ffffc7ff 	.word	0xffffc7ff
 8001184:	00f42400 	.word	0x00f42400
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004
 8001190:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001194:	4bb8      	ldr	r3, [pc, #736]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	055b      	lsls	r3, r3, #21
 800119c:	4013      	ands	r3, r2
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_OscConfig+0x364>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x366>
 80011a4:	2300      	movs	r3, #0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d011      	beq.n	80011ce <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4bb3      	ldr	r3, [pc, #716]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80011ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ae:	4bb2      	ldr	r3, [pc, #712]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	0549      	lsls	r1, r1, #21
 80011b4:	430a      	orrs	r2, r1
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b8:	4baf      	ldr	r3, [pc, #700]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80011ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	055b      	lsls	r3, r3, #21
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011c6:	231f      	movs	r3, #31
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ce:	4bab      	ldr	r3, [pc, #684]	; (800147c <HAL_RCC_OscConfig+0x63c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4013      	ands	r3, r2
 80011d8:	d11a      	bne.n	8001210 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011da:	4ba8      	ldr	r3, [pc, #672]	; (800147c <HAL_RCC_OscConfig+0x63c>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4ba7      	ldr	r3, [pc, #668]	; (800147c <HAL_RCC_OscConfig+0x63c>)
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0049      	lsls	r1, r1, #1
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fad6 	bl	8000798 <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fad1 	bl	8000798 <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e17d      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001204:	4b9d      	ldr	r3, [pc, #628]	; (800147c <HAL_RCC_OscConfig+0x63c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4013      	ands	r3, r2
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x3e6>
 8001218:	4b97      	ldr	r3, [pc, #604]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800121a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800121c:	4b96      	ldr	r3, [pc, #600]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800121e:	2101      	movs	r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	65da      	str	r2, [r3, #92]	; 0x5c
 8001224:	e01c      	b.n	8001260 <HAL_RCC_OscConfig+0x420>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b05      	cmp	r3, #5
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x408>
 800122e:	4b92      	ldr	r3, [pc, #584]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001230:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001234:	2104      	movs	r1, #4
 8001236:	430a      	orrs	r2, r1
 8001238:	65da      	str	r2, [r3, #92]	; 0x5c
 800123a:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800123c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800123e:	4b8e      	ldr	r3, [pc, #568]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001240:	2101      	movs	r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	65da      	str	r2, [r3, #92]	; 0x5c
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0x420>
 8001248:	4b8b      	ldr	r3, [pc, #556]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800124a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800124c:	4b8a      	ldr	r3, [pc, #552]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800124e:	2101      	movs	r1, #1
 8001250:	438a      	bics	r2, r1
 8001252:	65da      	str	r2, [r3, #92]	; 0x5c
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001258:	4b87      	ldr	r3, [pc, #540]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800125a:	2104      	movs	r1, #4
 800125c:	438a      	bics	r2, r1
 800125e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d014      	beq.n	8001292 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fa96 	bl	8000798 <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001270:	e009      	b.n	8001286 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fa91 	bl	8000798 <HAL_GetTick>
 8001276:	0002      	movs	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	4a80      	ldr	r2, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x640>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e13c      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001286:	4b7c      	ldr	r3, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128a:	2202      	movs	r2, #2
 800128c:	4013      	ands	r3, r2
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x432>
 8001290:	e013      	b.n	80012ba <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001292:	f7ff fa81 	bl	8000798 <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800129a:	e009      	b.n	80012b0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	f7ff fa7c 	bl	8000798 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	4a76      	ldr	r2, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x640>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e127      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b0:	4b71      	ldr	r3, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80012b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b4:	2202      	movs	r2, #2
 80012b6:	4013      	ands	r3, r2
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012ba:	231f      	movs	r3, #31
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d105      	bne.n	80012d0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012c4:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80012c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012c8:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80012ca:	496e      	ldr	r1, [pc, #440]	; (8001484 <HAL_RCC_OscConfig+0x644>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2220      	movs	r2, #32
 80012d6:	4013      	ands	r3, r2
 80012d8:	d039      	beq.n	800134e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d01b      	beq.n	800131a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012e2:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	03c9      	lsls	r1, r1, #15
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f0:	f7ff fa52 	bl	8000798 <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012fa:	f7ff fa4d 	bl	8000798 <HAL_GetTick>
 80012fe:	0002      	movs	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0f9      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800130c:	4b5a      	ldr	r3, [pc, #360]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	041b      	lsls	r3, r3, #16
 8001314:	4013      	ands	r3, r2
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x4ba>
 8001318:	e019      	b.n	800134e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800131a:	4b57      	ldr	r3, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001320:	4959      	ldr	r1, [pc, #356]	; (8001488 <HAL_RCC_OscConfig+0x648>)
 8001322:	400a      	ands	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001326:	f7ff fa37 	bl	8000798 <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001330:	f7ff fa32 	bl	8000798 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e0de      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001342:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	4013      	ands	r3, r2
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d100      	bne.n	8001358 <HAL_RCC_OscConfig+0x518>
 8001356:	e0d2      	b.n	80014fe <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001358:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2238      	movs	r2, #56	; 0x38
 800135e:	4013      	ands	r3, r2
 8001360:	2b10      	cmp	r3, #16
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x526>
 8001364:	e081      	b.n	800146a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d156      	bne.n	800141c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001374:	4945      	ldr	r1, [pc, #276]	; (800148c <HAL_RCC_OscConfig+0x64c>)
 8001376:	400a      	ands	r2, r1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fa0d 	bl	8000798 <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fa08 	bl	8000798 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0b4      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	049b      	lsls	r3, r3, #18
 800139e:	4013      	ands	r3, r2
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	4a3a      	ldr	r2, [pc, #232]	; (8001490 <HAL_RCC_OscConfig+0x650>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ce:	431a      	orrs	r2, r3
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80013d2:	430a      	orrs	r2, r1
 80013d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	0449      	lsls	r1, r1, #17
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	0549      	lsls	r1, r1, #21
 80013ee:	430a      	orrs	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff f9d1 	bl	8000798 <HAL_GetTick>
 80013f6:	0003      	movs	r3, r0
 80013f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff f9cc 	bl	8000798 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e078      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	049b      	lsls	r3, r3, #18
 8001416:	4013      	ands	r3, r2
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x5bc>
 800141a:	e070      	b.n	80014fe <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001422:	491a      	ldr	r1, [pc, #104]	; (800148c <HAL_RCC_OscConfig+0x64c>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800142e:	2103      	movs	r1, #3
 8001430:	438a      	bics	r2, r1
 8001432:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800143a:	4916      	ldr	r1, [pc, #88]	; (8001494 <HAL_RCC_OscConfig+0x654>)
 800143c:	400a      	ands	r2, r1
 800143e:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff f9aa 	bl	8000798 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff f9a5 	bl	8000798 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e051      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x638>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	049b      	lsls	r3, r3, #18
 8001464:	4013      	ands	r3, r2
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x60a>
 8001468:	e049      	b.n	80014fe <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d112      	bne.n	8001498 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e044      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40021000 	.word	0x40021000
 800147c:	40007000 	.word	0x40007000
 8001480:	00001388 	.word	0x00001388
 8001484:	efffffff 	.word	0xefffffff
 8001488:	ffbfffff 	.word	0xffbfffff
 800148c:	feffffff 	.word	0xfeffffff
 8001490:	11c1808c 	.word	0x11c1808c
 8001494:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x6c8>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2203      	movs	r2, #3
 80014a2:	401a      	ands	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d126      	bne.n	80014fa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2270      	movs	r2, #112	; 0x70
 80014b0:	401a      	ands	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d11f      	bne.n	80014fa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	23fe      	movs	r3, #254	; 0xfe
 80014be:	01db      	lsls	r3, r3, #7
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d116      	bne.n	80014fa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	23f8      	movs	r3, #248	; 0xf8
 80014d0:	039b      	lsls	r3, r3, #14
 80014d2:	401a      	ands	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d10e      	bne.n	80014fa <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	23e0      	movs	r3, #224	; 0xe0
 80014e0:	051b      	lsls	r3, r3, #20
 80014e2:	401a      	ands	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	0f5b      	lsrs	r3, r3, #29
 80014f0:	075a      	lsls	r2, r3, #29
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b008      	add	sp, #32
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0e9      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b76      	ldr	r3, [pc, #472]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2207      	movs	r2, #7
 8001526:	4013      	ands	r3, r2
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d91e      	bls.n	800156c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b73      	ldr	r3, [pc, #460]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2207      	movs	r2, #7
 8001534:	4393      	bics	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	4b70      	ldr	r3, [pc, #448]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001540:	f7ff f92a 	bl	8000798 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001548:	e009      	b.n	800155e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154a:	f7ff f925 	bl	8000798 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	4a6a      	ldr	r2, [pc, #424]	; (8001700 <HAL_RCC_ClockConfig+0x1f4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0ca      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800155e:	4b67      	ldr	r3, [pc, #412]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2207      	movs	r2, #7
 8001564:	4013      	ands	r3, r2
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d1ee      	bne.n	800154a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d015      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2204      	movs	r2, #4
 800157c:	4013      	ands	r3, r2
 800157e:	d006      	beq.n	800158e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 8001586:	21e0      	movs	r1, #224	; 0xe0
 8001588:	01c9      	lsls	r1, r1, #7
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	4a5d      	ldr	r2, [pc, #372]	; (8001708 <HAL_RCC_ClockConfig+0x1fc>)
 8001594:	4013      	ands	r3, r2
 8001596:	0019      	movs	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	d057      	beq.n	800165c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b4:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	d12b      	bne.n	8001618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e097      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015cc:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	049b      	lsls	r3, r3, #18
 80015d4:	4013      	ands	r3, r2
 80015d6:	d11f      	bne.n	8001618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e08b      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4013      	ands	r3, r2
 80015ee:	d113      	bne.n	8001618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e07f      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d106      	bne.n	800160a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001600:	2202      	movs	r2, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d108      	bne.n	8001618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e074      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e06d      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2207      	movs	r2, #7
 800161e:	4393      	bics	r3, r2
 8001620:	0019      	movs	r1, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800162c:	f7ff f8b4 	bl	8000798 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001634:	e009      	b.n	800164a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001636:	f7ff f8af 	bl	8000798 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <HAL_RCC_ClockConfig+0x1f4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e054      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2238      	movs	r2, #56	; 0x38
 8001650:	401a      	ands	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	429a      	cmp	r2, r3
 800165a:	d1ec      	bne.n	8001636 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2207      	movs	r2, #7
 8001662:	4013      	ands	r3, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d21e      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2207      	movs	r2, #7
 8001670:	4393      	bics	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800167c:	f7ff f88c 	bl	8000798 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001684:	e009      	b.n	800169a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001686:	f7ff f887 	bl	8000798 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <HAL_RCC_ClockConfig+0x1f4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e02c      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2207      	movs	r2, #7
 80016a0:	4013      	ands	r3, r2
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1ee      	bne.n	8001686 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2204      	movs	r2, #4
 80016ae:	4013      	ands	r3, r2
 80016b0:	d009      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <HAL_RCC_ClockConfig+0x200>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016c6:	f000 f829 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016ca:	0001      	movs	r1, r0
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	220f      	movs	r2, #15
 80016d4:	401a      	ands	r2, r3
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x204>)
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	58d3      	ldr	r3, [r2, r3]
 80016dc:	221f      	movs	r2, #31
 80016de:	4013      	ands	r3, r2
 80016e0:	000a      	movs	r2, r1
 80016e2:	40da      	lsrs	r2, r3
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x208>)
 80016e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_ClockConfig+0x20c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7fe fff7 	bl	80006e0 <HAL_InitTick>
 80016f2:	0003      	movs	r3, r0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40022000 	.word	0x40022000
 8001700:	00001388 	.word	0x00001388
 8001704:	40021000 	.word	0x40021000
 8001708:	fffff0ff 	.word	0xfffff0ff
 800170c:	ffff8fff 	.word	0xffff8fff
 8001710:	080026f4 	.word	0x080026f4
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2238      	movs	r2, #56	; 0x38
 8001728:	4013      	ands	r3, r2
 800172a:	d10f      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800172c:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0adb      	lsrs	r3, r3, #11
 8001732:	2207      	movs	r2, #7
 8001734:	4013      	ands	r3, r2
 8001736:	2201      	movs	r2, #1
 8001738:	409a      	lsls	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	4835      	ldr	r0, [pc, #212]	; (8001818 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001742:	f7fe fcdf 	bl	8000104 <__udivsi3>
 8001746:	0003      	movs	r3, r0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	e05d      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800174c:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2238      	movs	r2, #56	; 0x38
 8001752:	4013      	ands	r3, r2
 8001754:	2b08      	cmp	r3, #8
 8001756:	d102      	bne.n	800175e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_GetSysClockFreq+0x100>)
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	e054      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2238      	movs	r2, #56	; 0x38
 8001764:	4013      	ands	r3, r2
 8001766:	2b10      	cmp	r3, #16
 8001768:	d138      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2203      	movs	r2, #3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	2207      	movs	r2, #7
 800177c:	4013      	ands	r3, r2
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	4824      	ldr	r0, [pc, #144]	; (800181c <HAL_RCC_GetSysClockFreq+0x100>)
 800178c:	f7fe fcba 	bl	8000104 <__udivsi3>
 8001790:	0003      	movs	r3, r0
 8001792:	0019      	movs	r1, r3
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	227f      	movs	r2, #127	; 0x7f
 800179c:	4013      	ands	r3, r2
 800179e:	434b      	muls	r3, r1
 80017a0:	617b      	str	r3, [r7, #20]
        break;
 80017a2:	e00d      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	481c      	ldr	r0, [pc, #112]	; (8001818 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017a8:	f7fe fcac 	bl	8000104 <__udivsi3>
 80017ac:	0003      	movs	r3, r0
 80017ae:	0019      	movs	r1, r3
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	227f      	movs	r2, #127	; 0x7f
 80017b8:	4013      	ands	r3, r2
 80017ba:	434b      	muls	r3, r1
 80017bc:	617b      	str	r3, [r7, #20]
        break;
 80017be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0f5b      	lsrs	r3, r3, #29
 80017c6:	2207      	movs	r2, #7
 80017c8:	4013      	ands	r3, r2
 80017ca:	3301      	adds	r3, #1
 80017cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	6978      	ldr	r0, [r7, #20]
 80017d2:	f7fe fc97 	bl	8000104 <__udivsi3>
 80017d6:	0003      	movs	r3, r0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e015      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2238      	movs	r2, #56	; 0x38
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b20      	cmp	r3, #32
 80017e6:	d103      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2238      	movs	r2, #56	; 0x38
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b18      	cmp	r3, #24
 80017fa:	d103      	bne.n	8001804 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017fc:	23fa      	movs	r3, #250	; 0xfa
 80017fe:	01db      	lsls	r3, r3, #7
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e001      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001808:	693b      	ldr	r3, [r7, #16]
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b006      	add	sp, #24
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40021000 	.word	0x40021000
 8001818:	00f42400 	.word	0x00f42400
 800181c:	007a1200 	.word	0x007a1200

08001820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0a8      	b.n	8001984 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	2382      	movs	r3, #130	; 0x82
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	429a      	cmp	r2, r3
 8001844:	d009      	beq.n	800185a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
 800184c:	e005      	b.n	800185a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	225d      	movs	r2, #93	; 0x5d
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	225c      	movs	r2, #92	; 0x5c
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0018      	movs	r0, r3
 8001878:	f7fe fe6c 	bl	8000554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	225d      	movs	r2, #93	; 0x5d
 8001880:	2102      	movs	r1, #2
 8001882:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2140      	movs	r1, #64	; 0x40
 8001890:	438a      	bics	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	23e0      	movs	r3, #224	; 0xe0
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	429a      	cmp	r2, r3
 800189e:	d902      	bls.n	80018a6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e002      	b.n	80018ac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	015b      	lsls	r3, r3, #5
 80018aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	23f0      	movs	r3, #240	; 0xf0
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d008      	beq.n	80018ca <HAL_SPI_Init+0xaa>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	23e0      	movs	r3, #224	; 0xe0
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d002      	beq.n	80018ca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2382      	movs	r3, #130	; 0x82
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	2384      	movs	r3, #132	; 0x84
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	400b      	ands	r3, r1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2102      	movs	r1, #2
 80018e6:	400b      	ands	r3, r1
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2101      	movs	r1, #1
 80018f0:	400b      	ands	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6999      	ldr	r1, [r3, #24]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	400b      	ands	r3, r1
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	2138      	movs	r1, #56	; 0x38
 8001906:	400b      	ands	r3, r1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	400b      	ands	r3, r1
 8001912:	431a      	orrs	r2, r3
 8001914:	0011      	movs	r1, r2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	019b      	lsls	r3, r3, #6
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	2204      	movs	r2, #4
 8001930:	401a      	ands	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2110      	movs	r1, #16
 8001938:	400b      	ands	r3, r1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001940:	2108      	movs	r1, #8
 8001942:	400b      	ands	r3, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68d9      	ldr	r1, [r3, #12]
 800194a:	23f0      	movs	r3, #240	; 0xf0
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	400b      	ands	r3, r1
 8001950:	431a      	orrs	r2, r3
 8001952:	0011      	movs	r1, r2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	015b      	lsls	r3, r3, #5
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4907      	ldr	r1, [pc, #28]	; (800198c <HAL_SPI_Init+0x16c>)
 8001970:	400a      	ands	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	225d      	movs	r2, #93	; 0x5d
 800197e:	2101      	movs	r1, #1
 8001980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b004      	add	sp, #16
 800198a:	bd80      	pop	{r7, pc}
 800198c:	fffff7ff 	.word	0xfffff7ff

08001990 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	001a      	movs	r2, r3
 800199e:	1cbb      	adds	r3, r7, #2
 80019a0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019a2:	2301      	movs	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019a6:	2323      	movs	r3, #35	; 0x23
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	225c      	movs	r2, #92	; 0x5c
 80019b2:	5c9b      	ldrb	r3, [r3, r2]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_SPI_TransmitReceive+0x2c>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e1b5      	b.n	8001d28 <HAL_SPI_TransmitReceive+0x398>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	225c      	movs	r2, #92	; 0x5c
 80019c0:	2101      	movs	r1, #1
 80019c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019c4:	f7fe fee8 	bl	8000798 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019cc:	201b      	movs	r0, #27
 80019ce:	183b      	adds	r3, r7, r0
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	215d      	movs	r1, #93	; 0x5d
 80019d4:	5c52      	ldrb	r2, [r2, r1]
 80019d6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80019de:	2312      	movs	r3, #18
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	1cba      	adds	r2, r7, #2
 80019e4:	8812      	ldrh	r2, [r2, #0]
 80019e6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019e8:	183b      	adds	r3, r7, r0
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d011      	beq.n	8001a14 <HAL_SPI_TransmitReceive+0x84>
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	2382      	movs	r3, #130	; 0x82
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d107      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x7a>
 8001a02:	183b      	adds	r3, r7, r0
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d004      	beq.n	8001a14 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001a0a:	2323      	movs	r3, #35	; 0x23
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a12:	e17e      	b.n	8001d12 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_SPI_TransmitReceive+0x98>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_SPI_TransmitReceive+0x98>
 8001a20:	1cbb      	adds	r3, r7, #2
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d104      	bne.n	8001a32 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001a28:	2323      	movs	r3, #35	; 0x23
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a30:	e16f      	b.n	8001d12 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	225d      	movs	r2, #93	; 0x5d
 8001a36:	5c9b      	ldrb	r3, [r3, r2]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d003      	beq.n	8001a46 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	225d      	movs	r2, #93	; 0x5d
 8001a42:	2105      	movs	r1, #5
 8001a44:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1cba      	adds	r2, r7, #2
 8001a56:	2146      	movs	r1, #70	; 0x46
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1cba      	adds	r2, r7, #2
 8001a60:	2144      	movs	r1, #68	; 0x44
 8001a62:	8812      	ldrh	r2, [r2, #0]
 8001a64:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1cba      	adds	r2, r7, #2
 8001a70:	8812      	ldrh	r2, [r2, #0]
 8001a72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1cba      	adds	r2, r7, #2
 8001a78:	8812      	ldrh	r2, [r2, #0]
 8001a7a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	23e0      	movs	r3, #224	; 0xe0
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d908      	bls.n	8001aa6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	49a4      	ldr	r1, [pc, #656]	; (8001d30 <HAL_SPI_TransmitReceive+0x3a0>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	e008      	b.n	8001ab8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0149      	lsls	r1, r1, #5
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b40      	cmp	r3, #64	; 0x40
 8001ac4:	d007      	beq.n	8001ad6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2140      	movs	r1, #64	; 0x40
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	23e0      	movs	r3, #224	; 0xe0
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d800      	bhi.n	8001ae4 <HAL_SPI_TransmitReceive+0x154>
 8001ae2:	e07f      	b.n	8001be4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_SPI_TransmitReceive+0x168>
 8001aec:	2312      	movs	r3, #18
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d000      	beq.n	8001af8 <HAL_SPI_TransmitReceive+0x168>
 8001af6:	e069      	b.n	8001bcc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	1c9a      	adds	r2, r3, #2
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b1c:	e056      	b.n	8001bcc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2202      	movs	r2, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d11b      	bne.n	8001b64 <HAL_SPI_TransmitReceive+0x1d4>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <HAL_SPI_TransmitReceive+0x1d4>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d113      	bne.n	8001b64 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	881a      	ldrh	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	1c9a      	adds	r2, r3, #2
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d11c      	bne.n	8001bac <HAL_SPI_TransmitReceive+0x21c>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2246      	movs	r2, #70	; 0x46
 8001b76:	5a9b      	ldrh	r3, [r3, r2]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	b292      	uxth	r2, r2
 8001b8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	1c9a      	adds	r2, r3, #2
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2246      	movs	r2, #70	; 0x46
 8001b9a:	5a9b      	ldrh	r3, [r3, r2]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b299      	uxth	r1, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2246      	movs	r2, #70	; 0x46
 8001ba6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001bac:	f7fe fdf4 	bl	8000798 <HAL_GetTick>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d807      	bhi.n	8001bcc <HAL_SPI_TransmitReceive+0x23c>
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	d004      	beq.n	8001bcc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001bc2:	2323      	movs	r3, #35	; 0x23
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	701a      	strb	r2, [r3, #0]
        goto error;
 8001bca:	e0a2      	b.n	8001d12 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1a3      	bne.n	8001b1e <HAL_SPI_TransmitReceive+0x18e>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2246      	movs	r2, #70	; 0x46
 8001bda:	5a9b      	ldrh	r3, [r3, r2]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d19d      	bne.n	8001b1e <HAL_SPI_TransmitReceive+0x18e>
 8001be2:	e085      	b.n	8001cf0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x268>
 8001bec:	2312      	movs	r3, #18
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d000      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x268>
 8001bf6:	e070      	b.n	8001cda <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	330c      	adds	r3, #12
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c1e:	e05c      	b.n	8001cda <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d11c      	bne.n	8001c68 <HAL_SPI_TransmitReceive+0x2d8>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <HAL_SPI_TransmitReceive+0x2d8>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d114      	bne.n	8001c68 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	330c      	adds	r3, #12
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d11e      	bne.n	8001cb4 <HAL_SPI_TransmitReceive+0x324>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2246      	movs	r2, #70	; 0x46
 8001c7a:	5a9b      	ldrh	r3, [r3, r2]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d018      	beq.n	8001cb4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	330c      	adds	r3, #12
 8001c88:	001a      	movs	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	7812      	ldrb	r2, [r2, #0]
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2246      	movs	r2, #70	; 0x46
 8001ca2:	5a9b      	ldrh	r3, [r3, r2]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b299      	uxth	r1, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2246      	movs	r2, #70	; 0x46
 8001cae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cb4:	f7fe fd70 	bl	8000798 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d802      	bhi.n	8001cca <HAL_SPI_TransmitReceive+0x33a>
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_SPI_TransmitReceive+0x340>
 8001cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001cd0:	2323      	movs	r3, #35	; 0x23
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	701a      	strb	r2, [r3, #0]
        goto error;
 8001cd8:	e01b      	b.n	8001d12 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d19d      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x290>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2246      	movs	r2, #70	; 0x46
 8001ce8:	5a9b      	ldrh	r3, [r3, r2]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d197      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 fa68 	bl	80021cc <SPI_EndRxTxTransaction>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001d00:	2323      	movs	r3, #35	; 0x23
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	661a      	str	r2, [r3, #96]	; 0x60
 8001d0e:	e000      	b.n	8001d12 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001d10:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	225d      	movs	r2, #93	; 0x5d
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	225c      	movs	r2, #92	; 0x5c
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001d22:	2323      	movs	r3, #35	; 0x23
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	781b      	ldrb	r3, [r3, #0]
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b00a      	add	sp, #40	; 0x28
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	ffffefff 	.word	0xffffefff

08001d34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	099b      	lsrs	r3, r3, #6
 8001d50:	001a      	movs	r2, r3
 8001d52:	2301      	movs	r3, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	d10f      	bne.n	8001d78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d5e:	d00b      	beq.n	8001d78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	001a      	movs	r2, r3
 8001d66:	2301      	movs	r3, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d005      	beq.n	8001d78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	0010      	movs	r0, r2
 8001d74:	4798      	blx	r3
    return;
 8001d76:	e0d5      	b.n	8001f24 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d00b      	beq.n	8001d9c <HAL_SPI_IRQHandler+0x68>
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	09db      	lsrs	r3, r3, #7
 8001d88:	001a      	movs	r2, r3
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d005      	beq.n	8001d9c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	0010      	movs	r0, r2
 8001d98:	4798      	blx	r3
    return;
 8001d9a:	e0c3      	b.n	8001f24 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	001a      	movs	r2, r3
 8001da2:	2301      	movs	r3, #1
 8001da4:	4013      	ands	r3, r2
 8001da6:	d10c      	bne.n	8001dc2 <HAL_SPI_IRQHandler+0x8e>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	001a      	movs	r2, r3
 8001dae:	2301      	movs	r3, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	d106      	bne.n	8001dc2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	001a      	movs	r2, r3
 8001dba:	2301      	movs	r3, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d100      	bne.n	8001dc2 <HAL_SPI_IRQHandler+0x8e>
 8001dc0:	e0b0      	b.n	8001f24 <HAL_SPI_IRQHandler+0x1f0>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_SPI_IRQHandler+0x9c>
 8001dce:	e0a9      	b.n	8001f24 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d023      	beq.n	8001e24 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	225d      	movs	r2, #93	; 0x5d
 8001de0:	5c9b      	ldrb	r3, [r3, r2]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d011      	beq.n	8001e0c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	2204      	movs	r2, #4
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	e00b      	b.n	8001e24 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
        return;
 8001e22:	e07f      	b.n	8001f24 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	001a      	movs	r2, r3
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d014      	beq.n	8001e5a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e34:	2201      	movs	r2, #1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	438a      	bics	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	001a      	movs	r2, r3
 8001e60:	2301      	movs	r3, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	d00c      	beq.n	8001e80 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d04c      	beq.n	8001f22 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	21e0      	movs	r1, #224	; 0xe0
 8001e94:	438a      	bics	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	225d      	movs	r2, #93	; 0x5d
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <HAL_SPI_IRQHandler+0x17c>
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d032      	beq.n	8001f16 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2103      	movs	r1, #3
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_SPI_IRQHandler+0x1f8>)
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7fe fd81 	bl	80009dc <HAL_DMA_Abort_IT>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d005      	beq.n	8001eea <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <HAL_SPI_IRQHandler+0x1f8>)
 8001ef8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7fe fd6c 	bl	80009dc <HAL_DMA_Abort_IT>
 8001f04:	1e03      	subs	r3, r0, #0
 8001f06:	d00b      	beq.n	8001f20 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001f14:	e004      	b.n	8001f20 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 f809 	bl	8001f30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001f1e:	e000      	b.n	8001f22 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8001f20:	46c0      	nop			; (mov r8, r8)
    return;
 8001f22:	46c0      	nop			; (mov r8, r8)
  }
}
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b008      	add	sp, #32
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	08001f41 	.word	0x08001f41

08001f30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2246      	movs	r2, #70	; 0x46
 8001f52:	2100      	movs	r1, #0
 8001f54:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff ffe6 	bl	8001f30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f7c:	f7fe fc0c 	bl	8000798 <HAL_GetTick>
 8001f80:	0002      	movs	r2, r0
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	18d3      	adds	r3, r2, r3
 8001f8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f8c:	f7fe fc04 	bl	8000798 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	015b      	lsls	r3, r3, #5
 8001f9a:	0d1b      	lsrs	r3, r3, #20
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	4353      	muls	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fa2:	e058      	b.n	8002056 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	d055      	beq.n	8002056 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001faa:	f7fe fbf5 	bl	8000798 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d902      	bls.n	8001fc0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d142      	bne.n	8002046 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	21e0      	movs	r1, #224	; 0xe0
 8001fcc:	438a      	bics	r2, r1
 8001fce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	2382      	movs	r3, #130	; 0x82
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d113      	bne.n	8002004 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d005      	beq.n	8001ff4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d107      	bne.n	8002004 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2140      	movs	r1, #64	; 0x40
 8002000:	438a      	bics	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	019b      	lsls	r3, r3, #6
 800200c:	429a      	cmp	r2, r3
 800200e:	d110      	bne.n	8002032 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	491a      	ldr	r1, [pc, #104]	; (8002084 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800201c:	400a      	ands	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	0189      	lsls	r1, r1, #6
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	225d      	movs	r2, #93	; 0x5d
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	225c      	movs	r2, #92	; 0x5c
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e017      	b.n	8002076 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3b01      	subs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	4013      	ands	r3, r2
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	425a      	negs	r2, r3
 8002066:	4153      	adcs	r3, r2
 8002068:	b2db      	uxtb	r3, r3
 800206a:	001a      	movs	r2, r3
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d197      	bne.n	8001fa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b008      	add	sp, #32
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	20000000 	.word	0x20000000
 8002084:	ffffdfff 	.word	0xffffdfff

08002088 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002096:	2317      	movs	r3, #23
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800209e:	f7fe fb7b 	bl	8000798 <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80020ae:	f7fe fb73 	bl	8000798 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	0013      	movs	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	189b      	adds	r3, r3, r2
 80020c8:	00da      	lsls	r2, r3, #3
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	0d1b      	lsrs	r3, r3, #20
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	4353      	muls	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80020d4:	e068      	b.n	80021a8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	429a      	cmp	r2, r3
 80020de:	d10a      	bne.n	80020f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d107      	bne.n	80020f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	2117      	movs	r1, #23
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	d055      	beq.n	80021a8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020fc:	f7fe fb4c 	bl	8000798 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002108:	429a      	cmp	r2, r3
 800210a:	d902      	bls.n	8002112 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d142      	bne.n	8002198 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	21e0      	movs	r1, #224	; 0xe0
 800211e:	438a      	bics	r2, r1
 8002120:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	2382      	movs	r3, #130	; 0x82
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	429a      	cmp	r2, r3
 800212c:	d113      	bne.n	8002156 <SPI_WaitFifoStateUntilTimeout+0xce>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	429a      	cmp	r2, r3
 8002138:	d005      	beq.n	8002146 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	429a      	cmp	r2, r3
 8002144:	d107      	bne.n	8002156 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2140      	movs	r1, #64	; 0x40
 8002152:	438a      	bics	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	019b      	lsls	r3, r3, #6
 800215e:	429a      	cmp	r2, r3
 8002160:	d110      	bne.n	8002184 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800216e:	400a      	ands	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	0189      	lsls	r1, r1, #6
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	225d      	movs	r2, #93	; 0x5d
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	225c      	movs	r2, #92	; 0x5c
 8002190:	2100      	movs	r1, #0
 8002192:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e010      	b.n	80021ba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d18e      	bne.n	80020d6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b00a      	add	sp, #40	; 0x28
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	20000000 	.word	0x20000000
 80021c8:	ffffdfff 	.word	0xffffdfff

080021cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	23c0      	movs	r3, #192	; 0xc0
 80021dc:	0159      	lsls	r1, r3, #5
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	0013      	movs	r3, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	f7ff ff4e 	bl	8002088 <SPI_WaitFifoStateUntilTimeout>
 80021ec:	1e03      	subs	r3, r0, #0
 80021ee:	d007      	beq.n	8002200 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f4:	2220      	movs	r2, #32
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e027      	b.n	8002250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	0013      	movs	r3, r2
 800220a:	2200      	movs	r2, #0
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	f7ff fead 	bl	8001f6c <SPI_WaitFlagStateUntilTimeout>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d007      	beq.n	8002226 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	2220      	movs	r2, #32
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e014      	b.n	8002250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	23c0      	movs	r3, #192	; 0xc0
 800222a:	00d9      	lsls	r1, r3, #3
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	0013      	movs	r3, r2
 8002234:	2200      	movs	r2, #0
 8002236:	f7ff ff27 	bl	8002088 <SPI_WaitFifoStateUntilTimeout>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d007      	beq.n	800224e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	2220      	movs	r2, #32
 8002244:	431a      	orrs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e000      	b.n	8002250 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}

08002258 <app_init>:
 extern uint8_t data_array[4];

 uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

 void app_init(){
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0

 }
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <app_run>:

 void app_run(){
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	 nrf24_init();
 8002268:	f000 f82c 	bl	80022c4 <nrf24_init>

	 nrf24_config(2, sizeof(data_array));
 800226c:	2104      	movs	r1, #4
 800226e:	2002      	movs	r0, #2
 8002270:	f000 f836 	bl	80022e0 <nrf24_config>

	 nrf24_tx_address(rx_address);
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <app_run+0x54>)
 8002276:	0018      	movs	r0, r3
 8002278:	f000 f89e 	bl	80023b8 <nrf24_tx_address>
	 nrf24_rx_address(tx_address);
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <app_run+0x58>)
 800227e:	0018      	movs	r0, r3
 8002280:	f000 f886 	bl	8002390 <nrf24_rx_address>

	 while (1){

		if(nrf24_dataReady()) {
 8002284:	f000 f8ac 	bl	80023e0 <nrf24_dataReady>
 8002288:	1e03      	subs	r3, r0, #0
 800228a:	d0fb      	beq.n	8002284 <app_run+0x20>
			nrf24_getData(data_array);
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <app_run+0x5c>)
 800228e:	0018      	movs	r0, r3
 8002290:	f000 f8d2 	bl	8002438 <nrf24_getData>
			HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 8002294:	23a0      	movs	r3, #160	; 0xa0
 8002296:	05db      	lsls	r3, r3, #23
 8002298:	2201      	movs	r2, #1
 800229a:	2120      	movs	r1, #32
 800229c:	0018      	movs	r0, r3
 800229e:	f7fe fd71 	bl	8000d84 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80022a2:	2032      	movs	r0, #50	; 0x32
 80022a4:	f7fe fa82 	bl	80007ac <HAL_Delay>
			HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 80022a8:	23a0      	movs	r3, #160	; 0xa0
 80022aa:	05db      	lsls	r3, r3, #23
 80022ac:	2200      	movs	r2, #0
 80022ae:	2120      	movs	r1, #32
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7fe fd67 	bl	8000d84 <HAL_GPIO_WritePin>
		if(nrf24_dataReady()) {
 80022b6:	e7e5      	b.n	8002284 <app_run+0x20>
 80022b8:	20000014 	.word	0x20000014
 80022bc:	2000000c 	.word	0x2000000c
 80022c0:	20000038 	.word	0x20000038

080022c4 <nrf24_init>:

uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
    nrf24_setupPins();
 80022c8:	f7fe f8d9 	bl	800047e <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7fe f8db 	bl	8000488 <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7fe f8ec 	bl	80004b0 <nrf24_csn_digitalWrite>
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	0002      	movs	r2, r0
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	1dbb      	adds	r3, r7, #6
 80022ee:	1c0a      	adds	r2, r1, #0
 80022f0:	701a      	strb	r2, [r3, #0]
	uint8_t teste = 0;
 80022f2:	240f      	movs	r4, #15
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    /* Use static payload length ... */
    payload_len = pay_length;
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <nrf24_config+0xac>)
 80022fc:	1dba      	adds	r2, r7, #6
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	701a      	strb	r2, [r3, #0]

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	0019      	movs	r1, r3
 8002308:	2005      	movs	r0, #5
 800230a:	f000 f94d 	bl	80025a8 <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 800230e:	2100      	movs	r1, #0
 8002310:	2011      	movs	r0, #17
 8002312:	f000 f949 	bl	80025a8 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <nrf24_config+0xac>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	0019      	movs	r1, r3
 800231c:	2012      	movs	r0, #18
 800231e:	f000 f943 	bl	80025a8 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 8002322:	2100      	movs	r1, #0
 8002324:	2013      	movs	r0, #19
 8002326:	f000 f93f 	bl	80025a8 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 800232a:	2100      	movs	r1, #0
 800232c:	2014      	movs	r0, #20
 800232e:	f000 f93b 	bl	80025a8 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 8002332:	2100      	movs	r1, #0
 8002334:	2015      	movs	r0, #21
 8002336:	f000 f937 	bl	80025a8 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 800233a:	2100      	movs	r1, #0
 800233c:	2016      	movs	r0, #22
 800233e:	f000 f933 	bl	80025a8 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 8002342:	2106      	movs	r1, #6
 8002344:	2006      	movs	r0, #6
 8002346:	f000 f92f 	bl	80025a8 <nrf24_configRegister>
    nrf24_readRegister(RF_SETUP, &teste, 1);
 800234a:	193b      	adds	r3, r7, r4
 800234c:	2201      	movs	r2, #1
 800234e:	0019      	movs	r1, r3
 8002350:	2006      	movs	r0, #6
 8002352:	f000 f94c 	bl	80025ee <nrf24_readRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 8002356:	2108      	movs	r1, #8
 8002358:	2000      	movs	r0, #0
 800235a:	f000 f925 	bl	80025a8 <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 800235e:	2103      	movs	r1, #3
 8002360:	2001      	movs	r0, #1
 8002362:	f000 f921 	bl	80025a8 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 8002366:	2103      	movs	r1, #3
 8002368:	2002      	movs	r0, #2
 800236a:	f000 f91d 	bl	80025a8 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 800236e:	214f      	movs	r1, #79	; 0x4f
 8002370:	2004      	movs	r0, #4
 8002372:	f000 f919 	bl	80025a8 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 8002376:	2100      	movs	r1, #0
 8002378:	201c      	movs	r0, #28
 800237a:	f000 f915 	bl	80025a8 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 800237e:	f000 f88e 	bl	800249e <nrf24_powerUpRx>
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b005      	add	sp, #20
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	200000a4 	.word	0x200000a4

08002390 <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
    nrf24_ce_digitalWrite(LOW);
 8002398:	2000      	movs	r0, #0
 800239a:	f7fe f875 	bl	8000488 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	0019      	movs	r1, r3
 80023a4:	200b      	movs	r0, #11
 80023a6:	f000 f946 	bl	8002636 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe f86c 	bl	8000488 <nrf24_ce_digitalWrite>
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2205      	movs	r2, #5
 80023c4:	0019      	movs	r1, r3
 80023c6:	200a      	movs	r0, #10
 80023c8:	f000 f935 	bl	8002636 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2205      	movs	r2, #5
 80023d0:	0019      	movs	r1, r3
 80023d2:	2010      	movs	r0, #16
 80023d4:	f000 f92f 	bl	8002636 <nrf24_writeRegister>
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
 80023e6:	1dfc      	adds	r4, r7, #7
 80023e8:	f000 f844 	bl	8002474 <nrf24_getStatus>
 80023ec:	0003      	movs	r3, r0
 80023ee:	7023      	strb	r3, [r4, #0]

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	4013      	ands	r3, r2
 80023f8:	d001      	beq.n	80023fe <nrf24_dataReady+0x1e>
    {
        return 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e005      	b.n	800240a <nrf24_dataReady+0x2a>
    }

    return !nrf24_rxFifoEmpty();;
 80023fe:	f000 f808 	bl	8002412 <nrf24_rxFifoEmpty>
 8002402:	0003      	movs	r3, r0
 8002404:	425a      	negs	r2, r3
 8002406:	4153      	adcs	r3, r2
 8002408:	b2db      	uxtb	r3, r3
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b003      	add	sp, #12
 8002410:	bd90      	pop	{r4, r7, pc}

08002412 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	2201      	movs	r2, #1
 800241c:	0019      	movs	r1, r3
 800241e:	2017      	movs	r0, #23
 8002420:	f000 f8e5 	bl	80025ee <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	b2db      	uxtb	r3, r3
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe f835 	bl	80004b0 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
 8002446:	2061      	movs	r0, #97	; 0x61
 8002448:	f000 f845 	bl	80024d6 <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <nrf24_getData+0x38>)
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 f855 	bl	8002504 <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 800245a:	2001      	movs	r0, #1
 800245c:	f7fe f828 	bl	80004b0 <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	2007      	movs	r0, #7
 8002464:	f000 f8a0 	bl	80025a8 <nrf24_configRegister>
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200000a4 	.word	0x200000a4

08002474 <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe f818 	bl	80004b0 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
 8002480:	1dfc      	adds	r4, r7, #7
 8002482:	20ff      	movs	r0, #255	; 0xff
 8002484:	f000 f827 	bl	80024d6 <spi_transfer>
 8002488:	0003      	movs	r3, r0
 800248a:	7023      	strb	r3, [r4, #0]
    nrf24_csn_digitalWrite(HIGH);
 800248c:	2001      	movs	r0, #1
 800248e:	f7fe f80f 	bl	80004b0 <nrf24_csn_digitalWrite>
    return rv;
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b003      	add	sp, #12
 800249c:	bd90      	pop	{r4, r7, pc}

0800249e <nrf24_powerUpRx>:
        return 0xFF;
    }
}

void nrf24_powerUpRx()
{     
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
    nrf24_csn_digitalWrite(LOW);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7fe f804 	bl	80004b0 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
 80024a8:	20e2      	movs	r0, #226	; 0xe2
 80024aa:	f000 f814 	bl	80024d6 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7fd fffe 	bl	80004b0 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 80024b4:	2170      	movs	r1, #112	; 0x70
 80024b6:	2007      	movs	r0, #7
 80024b8:	f000 f876 	bl	80025a8 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
 80024bc:	2000      	movs	r0, #0
 80024be:	f7fd ffe3 	bl	8000488 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 80024c2:	210b      	movs	r1, #11
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f86f 	bl	80025a8 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fd ffdc 	bl	8000488 <nrf24_ce_digitalWrite>
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
 80024d6:	b5b0      	push	{r4, r5, r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	0002      	movs	r2, r0
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	701a      	strb	r2, [r3, #0]
    uint8_t rx = 0;    
 80024e2:	250f      	movs	r5, #15
 80024e4:	197b      	adds	r3, r7, r5
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]

    rx = nrf24_spi_transfer(&tx);
 80024ea:	197c      	adds	r4, r7, r5
 80024ec:	1dfb      	adds	r3, r7, #7
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7fd fff2 	bl	80004d8 <nrf24_spi_transfer>
 80024f4:	0003      	movs	r3, r0
 80024f6:	7023      	strb	r3, [r4, #0]

    return rx;
 80024f8:	197b      	adds	r3, r7, r5
 80024fa:	781b      	ldrb	r3, [r3, #0]
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bdb0      	pop	{r4, r5, r7, pc}

08002504 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for(i=0;i<len;i++)
 8002512:	2317      	movs	r3, #23
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e013      	b.n	8002544 <nrf24_transferSync+0x40>
    {
        datain[i] = spi_transfer(dataout[i]);
 800251c:	2517      	movs	r5, #23
 800251e:	197b      	adds	r3, r7, r5
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	18d3      	adds	r3, r2, r3
 8002526:	7819      	ldrb	r1, [r3, #0]
 8002528:	197b      	adds	r3, r7, r5
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	18d4      	adds	r4, r2, r3
 8002530:	0008      	movs	r0, r1
 8002532:	f7ff ffd0 	bl	80024d6 <spi_transfer>
 8002536:	0003      	movs	r3, r0
 8002538:	7023      	strb	r3, [r4, #0]
    for(i=0;i<len;i++)
 800253a:	197b      	adds	r3, r7, r5
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	197b      	adds	r3, r7, r5
 8002540:	3201      	adds	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	2317      	movs	r3, #23
 8002546:	18fa      	adds	r2, r7, r3
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d3e4      	bcc.n	800251c <nrf24_transferSync+0x18>
    }

}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b006      	add	sp, #24
 800255a:	bdb0      	pop	{r4, r5, r7, pc}

0800255c <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	000a      	movs	r2, r1
 8002566:	1cfb      	adds	r3, r7, #3
 8002568:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    
    for(i=0;i<len;i++)
 800256a:	230f      	movs	r3, #15
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e00d      	b.n	8002590 <nrf24_transmitSync+0x34>
    {
        spi_transfer(dataout[i]);
 8002574:	240f      	movs	r4, #15
 8002576:	193b      	adds	r3, r7, r4
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	18d3      	adds	r3, r2, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff ffa8 	bl	80024d6 <spi_transfer>
    for(i=0;i<len;i++)
 8002586:	193b      	adds	r3, r7, r4
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	193b      	adds	r3, r7, r4
 800258c:	3201      	adds	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	230f      	movs	r3, #15
 8002592:	18fa      	adds	r2, r7, r3
 8002594:	1cfb      	adds	r3, r7, #3
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d3ea      	bcc.n	8002574 <nrf24_transmitSync+0x18>
    }

}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b005      	add	sp, #20
 80025a6:	bd90      	pop	{r4, r7, pc}

080025a8 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	0002      	movs	r2, r0
 80025b0:	1dfb      	adds	r3, r7, #7
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	1dbb      	adds	r3, r7, #6
 80025b6:	1c0a      	adds	r2, r1, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fd ff78 	bl	80004b0 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	221f      	movs	r2, #31
 80025c6:	4013      	ands	r3, r2
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2220      	movs	r2, #32
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff ff80 	bl	80024d6 <spi_transfer>
    spi_transfer(value);
 80025d6:	1dbb      	adds	r3, r7, #6
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff ff7b 	bl	80024d6 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7fd ff65 	bl	80004b0 <nrf24_csn_digitalWrite>
}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b002      	add	sp, #8
 80025ec:	bd80      	pop	{r7, pc}

080025ee <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	0011      	movs	r1, r2
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	1c02      	adds	r2, r0, #0
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	1dbb      	adds	r3, r7, #6
 8002600:	1c0a      	adds	r2, r1, #0
 8002602:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fd ff53 	bl	80004b0 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	221f      	movs	r2, #31
 8002610:	4013      	ands	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff ff5e 	bl	80024d6 <spi_transfer>
    nrf24_transferSync(value,value,len);
 800261a:	1dbb      	adds	r3, r7, #6
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	0018      	movs	r0, r3
 8002624:	f7ff ff6e 	bl	8002504 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
 8002628:	2001      	movs	r0, #1
 800262a:	f7fd ff41 	bl	80004b0 <nrf24_csn_digitalWrite>
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}

08002636 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	0011      	movs	r1, r2
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	1c02      	adds	r2, r0, #0
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	1dbb      	adds	r3, r7, #6
 8002648:	1c0a      	adds	r2, r1, #0
 800264a:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fd ff2f 	bl	80004b0 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	221f      	movs	r2, #31
 8002658:	4013      	ands	r3, r2
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2220      	movs	r2, #32
 800265e:	4313      	orrs	r3, r2
 8002660:	b2db      	uxtb	r3, r3
 8002662:	0018      	movs	r0, r3
 8002664:	f7ff ff37 	bl	80024d6 <spi_transfer>
    nrf24_transmitSync(value,len);
 8002668:	1dbb      	adds	r3, r7, #6
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	0011      	movs	r1, r2
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff ff73 	bl	800255c <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 8002676:	2001      	movs	r0, #1
 8002678:	f7fd ff1a 	bl	80004b0 <nrf24_csn_digitalWrite>
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}

08002684 <__libc_init_array>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	2600      	movs	r6, #0
 8002688:	4d0c      	ldr	r5, [pc, #48]	; (80026bc <__libc_init_array+0x38>)
 800268a:	4c0d      	ldr	r4, [pc, #52]	; (80026c0 <__libc_init_array+0x3c>)
 800268c:	1b64      	subs	r4, r4, r5
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	42a6      	cmp	r6, r4
 8002692:	d109      	bne.n	80026a8 <__libc_init_array+0x24>
 8002694:	2600      	movs	r6, #0
 8002696:	f000 f821 	bl	80026dc <_init>
 800269a:	4d0a      	ldr	r5, [pc, #40]	; (80026c4 <__libc_init_array+0x40>)
 800269c:	4c0a      	ldr	r4, [pc, #40]	; (80026c8 <__libc_init_array+0x44>)
 800269e:	1b64      	subs	r4, r4, r5
 80026a0:	10a4      	asrs	r4, r4, #2
 80026a2:	42a6      	cmp	r6, r4
 80026a4:	d105      	bne.n	80026b2 <__libc_init_array+0x2e>
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	00b3      	lsls	r3, r6, #2
 80026aa:	58eb      	ldr	r3, [r5, r3]
 80026ac:	4798      	blx	r3
 80026ae:	3601      	adds	r6, #1
 80026b0:	e7ee      	b.n	8002690 <__libc_init_array+0xc>
 80026b2:	00b3      	lsls	r3, r6, #2
 80026b4:	58eb      	ldr	r3, [r5, r3]
 80026b6:	4798      	blx	r3
 80026b8:	3601      	adds	r6, #1
 80026ba:	e7f2      	b.n	80026a2 <__libc_init_array+0x1e>
 80026bc:	08002734 	.word	0x08002734
 80026c0:	08002734 	.word	0x08002734
 80026c4:	08002734 	.word	0x08002734
 80026c8:	08002738 	.word	0x08002738

080026cc <memset>:
 80026cc:	0003      	movs	r3, r0
 80026ce:	1882      	adds	r2, r0, r2
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d100      	bne.n	80026d6 <memset+0xa>
 80026d4:	4770      	bx	lr
 80026d6:	7019      	strb	r1, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	e7f9      	b.n	80026d0 <memset+0x4>

080026dc <_init>:
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e2:	bc08      	pop	{r3}
 80026e4:	469e      	mov	lr, r3
 80026e6:	4770      	bx	lr

080026e8 <_fini>:
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ee:	bc08      	pop	{r3}
 80026f0:	469e      	mov	lr, r3
 80026f2:	4770      	bx	lr
